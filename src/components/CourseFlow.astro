---
// Interactive CS Course Flow Component
// Displays course dependencies with hover interactions

import { getAugmentedCoursesData, getCourseData } from '../utils/courses.ts';

const coursesData = getAugmentedCoursesData();

// Statically import all course files
const courseFiles = import.meta.glob('../content/docs/Courses/*.{md,mdx}', { eager: true });
const existingCourseFiles = Object.keys(courseFiles).map(path => 
  path.split('/').pop()?.replace(/\.(md|mdx)$/, '')
);

interface Course {
  name: string;
  link: string;
  prerequisites?: string[];
  prerequisitesFor?: string[];
}

function doesCourseHaveFile(course: Course): boolean {
  const courseFileName = course.link.split('/').pop();
  return existingCourseFiles.includes(courseFileName);
}

// Note: Using getCourseData from utils for course lookup

const termOrder = Object.keys(coursesData.termLayout);
const termLayout = coursesData.termLayout;
const spring6OrGroup = coursesData.spring6OrGroup;

// Helper to extract course code
function getCode(label: string): string {
  const m = label.match(/^[A-Z]{2,4}\s?\d{3}/);
  return m ? m[0].replace(/\s+/, " ") : label;
}

// Create a unique ID for the component instance
const componentId = `course-flow-${Math.random().toString(36).slice(2, 9)}`;
---

<div class="course-flow-container">
  <header class="legend">
    <div class="legend-items">
      <span class="legend-item">
        <span class="legend-color bg-past"></span>
        Immediate prerequisite
      </span>
      <span class="legend-item">
        <span class="legend-color bg-past-soft"></span>
        Indirect prerequisite
      </span>
      <span class="legend-item">
        <span class="legend-color bg-future"></span>
        Immediate dependent
      </span>
      <span class="legend-item">
        <span class="legend-color bg-future-soft"></span>
        Indirect dependent
      </span>
    </div>
  </header>

  <section class="terms-grid" id={componentId}>
    {termOrder.map((termName) => (
      <div class="term-column">
        <h3 class="term-header">{termName.replace("-", " ")}</h3>
        
        {termLayout[termName]?.map((label) => {
          const code = getCode(label);
          const displayLabel = label.includes(code) ? null : label;
          
          const course = getCourseData(code);
          const hasFile = course ? doesCourseHaveFile(course) : false;
          const href = course && hasFile ? course.link : null;
          
          return (
            <div class={`course ${hasFile ? 'has-file' : 'no-file'}`} data-code={code} data-href={href}>
              <div class="course-code">{code}</div>
              {displayLabel && (
                <div class="course-label">{displayLabel}</div>
              )}
            </div>
          );
        })}
        
        {termName === "Spring-6" && (
          <div class="or-block">
            <div class="or-courses">
              {spring6OrGroup.map((courseCode, index) => {
                const course = getCourseData(courseCode);
                const hasFile = course ? doesCourseHaveFile(course) : false;
                const href = course && hasFile ? course.link : null;
                
                return (
                  <>
                    <div class={`course ${hasFile ? 'has-file' : 'no-file'}`} data-code={courseCode} data-href={href}>
                      <div class="course-code">{courseCode}</div>
                    </div>
                    {index < spring6OrGroup.length - 1 && <div class="or-text">OR</div>}
                  </>
                );
              })}
            </div>
          </div>
        )}
      </div>
    ))}
  </section>

  <div class="tip">
    Tip: On touch devices, tap a course to toggle highlight; tap empty space to clear.
  </div>
</div>

<style>
  .course-flow-container {
    max-width: 1200px;
    margin: 2rem auto 3rem;
    padding: 0 1rem;
    font-family: Inter, system-ui, -apple-system, 'Segoe UI', Roboto, Arial;
    line-height: 1.35;
    color: #e6edf3;
  }

  /* Dark mode colors (default) */
  .course-flow-container {
    --cf-bg-panel: #121822;
    --cf-bg-card: #16202e;
    --cf-bg-card-hover: #22314a;
    --cf-border-primary: #273347;
    --cf-text-primary: #e6edf3;
    --cf-text-muted: #93a1b3;
    --cf-text-link: #cfe3ff;
    --cf-shadow-hover: rgba(0, 0, 0, 0.25);
    
    --cf-color-future: #1f6feb;
    --cf-color-future-soft: #5181bc;
    --cf-color-past: #1db954;
    --cf-color-past-soft: #8fe3b0;
  }

  /* Light mode */
  :root[data-theme="light"] .course-flow-container {
    --cf-bg-panel: #f6f8fa;
    --cf-bg-card: #ffffff;
    --cf-bg-card-hover: #f1f3f4;
    --cf-border-primary: #d1d9e0;
    --cf-text-primary: #1f2328;
    --cf-text-muted: #656d76;
    --cf-text-link: #0969da;
    --cf-shadow-hover: rgba(0, 0, 0, 0.15);
    
    --cf-color-future: #0969da;
    --cf-color-future-soft: #4184e4;
    --cf-color-past: #1a7f37;
    --cf-color-past-soft: #2da44e;
  }

  .legend {
    margin-bottom: 1rem;
  }

  .legend-items {
    display: flex;
    gap: 0.875rem;
    align-items: center;
    margin-top: 0.5rem;
    color: var(--cf-text-muted);
    font-size: 13px;
  }

  .legend-item {
    display: inline-flex;
    align-items: center;
    gap: 0.375rem;
  }

  .legend-color {
    display: inline-block;
    width: 14px;
    height: 10px;
    border-radius: 2px;
  }

  .bg-future-soft { background-color: var(--cf-color-future-soft); }
  .bg-past-soft { background-color: var(--cf-color-past-soft); }
  .bg-past { background-color: var(--cf-color-past); }
  .bg-future { background-color: var(--cf-color-future); }

  .terms-grid {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    gap: 0;
    margin-top: 1.125rem;
    border-radius: 10px;
    overflow: hidden;
  }

  @media (max-width: 1100px) {
    .terms-grid { 
      grid-template-columns: repeat(4, 1fr);
      grid-template-rows: repeat(2, 1fr);
    }
  }

  @media (max-width: 720px) {
    .terms-grid { 
      grid-template-columns: repeat(2, 1fr);
      grid-template-rows: repeat(4, 1fr);
    }
  }

  .term-column {
    display: flex;
    flex-direction: column;
    gap: 0.625rem;
    background-color: var(--cf-bg-panel);
    border: 1px solid var(--cf-border-primary);
    padding: 0.625rem;
    overflow: hidden;
    margin-top: 0 !important;
  }

  .term-header {
    margin: 0;
    font-size: 14px;
    letter-spacing: 0.03em;
    color: var(--cf-text-muted);
    text-transform: uppercase;
  }

  .course {
    position: relative;
    cursor: pointer;
    border-radius: 6px;
    border: 1px solid var(--cf-border-primary);
    background-color: var(--cf-bg-card);
    padding: 0.625rem;
    transition: all 0.2s ease;
  }
  
  .course.no-file {
    opacity: 0.8;
  }
  
  .course.has-file {
    cursor: pointer;
  }
  
  .course.has-file .course-code {
    color: var(--cf-text-link);
  }

  .course:hover {
    background-color: var(--cf-bg-card-hover);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px var(--cf-shadow-hover);
  }

  .course-code {
    font-weight: bold;
    letter-spacing: 0.04em;
    color: var(--cf-text-primary);
  }

  .course-label {
    margin-top: 0.125rem;
    font-size: 13px;
    color: var(--cf-text-link);
  }

  .or-block {
    margin-top: 0.5rem;
    border-top: 1px dashed var(--cf-border-primary);
    padding-top: 0.5rem;
  }

  .or-courses {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .or-text {
    color: var(--cf-text-muted);
    font-weight: bold;
    letter-spacing: 0.06em;
    padding: 0 0.125rem;
    font-size: 12px;
    text-align: center;
  }

  .tip {
    margin-top: 1.75rem;
    color: var(--cf-text-muted);
    font-size: 12px;
  }

  /* Highlight states */
  .course.future {
    background-color: rgba(31, 111, 235, 0.7) !important;
    outline: 1px solid rgba(31, 111, 235, 0.4);
  }
  
  .course.future-soft {
    background-color: rgba(81, 129, 188, 0.5) !important;
    outline: 1px solid rgba(81, 129, 188, 0.35);
  }
  
  .course.past {
    background-color: rgba(29, 185, 84, 0.7) !important;
    outline: 1px solid rgba(29, 185, 84, 0.4);
  }
  
  .course.past-soft {
    background-color: rgba(143, 227, 176, 0.5) !important;
    outline: 1px solid rgba(143, 227, 176, 0.35);
  }

  .course.future:hover,
  .course.future-soft:hover,
  .course.past:hover,
  .course.past-soft:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px var(--cf-shadow-hover);
  }

  /* Light mode overrides */
  :root[data-theme="light"] .course.future {
    background-color: rgba(9, 105, 218, 0.5) !important;
    outline-color: rgba(9, 105, 218, 0.3);
  }
  
  :root[data-theme="light"] .course.future-soft {
    background-color: rgba(65, 132, 228, 0.3) !important;
    outline-color: rgba(65, 132, 228, 0.25);
  }
  
  :root[data-theme="light"] .course.past {
    background-color: rgba(26, 127, 55, 0.5) !important;
    outline-color: rgba(26, 127, 55, 0.3);
  }
  
  :root[data-theme="light"] .course.past-soft {
    background-color: rgba(45, 164, 78, 0.3) !important;
    outline-color: rgba(45, 164, 78, 0.25);
  }
</style>

<script define:vars={{ componentId, coursesData }}>
  // Course catalog from augmented JSON data
  const catalog = coursesData.catalog;

  // Helper to extract course code from label
  function getCode(label) {
    const m = label.match(/^[A-Z]{2,4}\s?\d{3}/);
    return m ? m[0].replace(/\s+/, " ") : label;
  }

  const graph = new Map();
  
  function ensureNode(code) {
    if (!graph.has(code)) {
      graph.set(code, {
        code,
        prereq: new Set(),
        next: new Set(),
      });
    }
    return graph.get(code);
  }

  // Build graph from catalog
  for (const [group, items] of Object.entries(catalog)) {
    for (const item of items) {
      const code = getCode(item.name);
      const node = ensureNode(code);

      (item.prerequisites || []).forEach((p) => {
        const pCode = getCode(p);
        ensureNode(pCode).next.add(code);
        node.prereq.add(pCode);
      });

      (item.prerequisitesFor || []).forEach((n) => {
        const nCode = getCode(n);
        ensureNode(nCode).prereq.add(code);
        node.next.add(nCode);
      });
    }
  }
  
  // Term layout data from JSON file
  const termLayout = coursesData.termLayout;
  
  for (const term of Object.values(termLayout)) {
    for (const label of term) {
      ensureNode(getCode(label));
    }
  }
  
  // BFS for finding layers of prerequisites/dependents
  function bfsLayers(start, direction = 'past') {
    const layers = [];
    const visited = new Set([start]);
    let frontier = new Set([start]);

    const step = (code) => {
      const node = graph.get(code);
      if (!node) return [];
      return direction === 'past'
        ? Array.from(node.prereq)
        : Array.from(node.next);
    };

    while (frontier.size) {
      const nextFrontier = new Set();
      frontier.forEach((c) => {
        step(c).forEach((n) => {
          if (!visited.has(n)) {
            visited.add(n);
            nextFrontier.add(n);
          }
        });
      });
      if (nextFrontier.size) layers.push(nextFrontier);
      frontier = nextFrontier;
    }
    return layers;
  }

  function highlightFor(code) {
    const pastLayers = bfsLayers(code, 'past');
    const futureLayers = bfsLayers(code, 'future');
    
    // Clear existing highlights
    document.querySelectorAll(`#${componentId} .course`).forEach((el) => {
      el.classList.remove('past', 'past-soft', 'future', 'future-soft');
    });

    // Highlight immediate prerequisites (green)
    if (pastLayers[0]) {
      pastLayers[0].forEach((c) => {
        document.querySelectorAll(`#${componentId} [data-code="${c}"]`).forEach((el) => {
          el.classList.add('past');
        });
      });
    }

    // Highlight indirect prerequisites (light green)
    const pastSoft = new Set();
    pastLayers.slice(1).forEach(layer => {
      layer.forEach(c => pastSoft.add(c));
    });
    pastSoft.forEach((c) => {
      document.querySelectorAll(`#${componentId} [data-code="${c}"]`).forEach((el) => {
        el.classList.add('past-soft');
      });
    });

    // Highlight immediate dependents (blue)
    if (futureLayers[0]) {
      futureLayers[0].forEach((c) => {
        document.querySelectorAll(`#${componentId} [data-code="${c}"]`).forEach((el) => {
          el.classList.add('future');
        });
      });
    }

    // Highlight indirect dependents (light blue)
    const futureSoft = new Set();
    futureLayers.slice(1).forEach(layer => {
      layer.forEach(c => futureSoft.add(c));
    });
    futureSoft.forEach((c) => {
      document.querySelectorAll(`#${componentId} [data-code="${c}"]`).forEach((el) => {
        el.classList.add('future-soft');
      });
    });
  }

  function clearHighlights() {
    document.querySelectorAll(`#${componentId} .course`).forEach((el) => {
      el.classList.remove('past', 'past-soft', 'future', 'future-soft', 'active-hover');
    });
  }

  // Add event listeners
  document.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll(`#${componentId} .course`).forEach((course) => {
      const code = course.dataset.code;
      
      course.addEventListener('mouseenter', () => highlightFor(code));
      course.addEventListener('mouseleave', () => clearHighlights());
      
      course.addEventListener('click', (e) => {
        e.stopPropagation();
        
        // Handle navigation if course has a file
        const href = course.dataset.href;
        if (href && e.metaKey) {
          // Cmd+click to open in new tab
          window.open(href, '_blank');
          return;
        } else if (href && !e.shiftKey) {
          // Regular click to navigate
          window.location.href = href;
          return;
        }
        
        // Otherwise handle highlight toggle
        const active = course.classList.contains('active-hover');
        clearHighlights();
        if (!active) {
          course.classList.add('active-hover');
          highlightFor(code);
        }
      });
    });

    // Clear highlights when clicking empty space
    document.addEventListener('click', clearHighlights);
  });
</script>