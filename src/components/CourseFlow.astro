---
// CourseFlow.astro - Interactive CS Course Flow Component

const termOrder = [
  "Fall-1", "Spring-2", "Fall-3", "Spring-4", 
  "Fall-5", "Spring-6", "Fall-7", "Spring-8"
];

const termLayout = {
  "Fall-1": ["ENG 101", "FSE 100", "CSE 110", "ASU 101", "MAT 265", "HU/SB"],
  "Spring-2": ["ENG 102", "SQ LAB SCI", "CSE 205", "MAT 266", "HU or SB & AA"],
  "Fall-3": ["SQ LAB SCI", "EEE 120", "CSE 240", "MAT 267 or CSE 259", "MAT 243"],
  "Spring-4": ["SQ LAB SCI", "CSE 230", "CSE 310", "HU or SB & AA", "General Elective"],
  "Fall-5": ["CSE 301", "CSE 365", "CSE 355", "CSE 360", "IEE 380", "HU or SB"],
  "Spring-6": ["CSE 330", "CSE 340", "MAT 343", "Upper Div HU/SB"],
  "Fall-7": ["CSE 4XX", "CSE 4XX", "Tech Elect", "CSE 485"],
  "Spring-8": ["CSE 4XX", "CSE 4XX", "Tech Elect", "CSE 486"],
};

const spring6OrGroup = ["CSE 412", "CSE 434", "CSE 445"];

const catalog = [
  {
    group: "Core (1xx - 2xx)",
    items: [
      { name: "CSE 110 - Principles of Programming", link: "/courses/cse-110", prerequisites: [], prerequisitesFor: ["CSE 205", "CSE 230"] },
      { name: "FSE 100 - Intro to Engineering", link: "/courses/fse-100", prerequisites: [], prerequisitesFor: ["CSE 301"] },
      { name: "EEE 120 - Digital Design Fundamentals", link: "/courses/eee-120", prerequisites: [], prerequisitesFor: ["CSE 230"] },
      { name: "CSE 205 - Object-Oriented Programming in Java", link: "/courses/cse-205", prerequisites: ["CSE 110"], prerequisitesFor: ["CSE 301", "CSE 310", "CSE 360"] },
      { name: "CSE 230 - Computer Organization and Architecture", link: "/courses/cse-230", prerequisites: ["CSE 110", "EEE 120"], prerequisitesFor: ["CSE 330", "CSE 340"] },
      { name: "CSE 240 - Introduction to Programming Languages", link: "/courses/cse-240", prerequisites: ["CSE 205"], prerequisitesFor: ["CSE 310", "CSE 360"] },
      { name: "MAT 243 - Discrete Mathematics", link: "/courses/mat-243", prerequisites: ["MAT 265"], prerequisitesFor: ["CSE 310"] },
    ],
  },
  {
    group: "Core (3xx - 4xx)",
    items: [
      { name: "CSE 301 - Computing Ethics", link: "/courses/cse-301", prerequisites: ["CSE 205", "FSE 100"], prerequisitesFor: ["CSE 485"] },
      { name: "CSE 310 - Data Structures and Algorithms", link: "/courses/cse-310", prerequisites: ["CSE 205", "MAT 243"], prerequisitesFor: ["CSE 330", "CSE 340", "CSE 355"] },
      { name: "CSE 330 - Operating Systems", link: "/courses/cse-330", prerequisites: ["CSE 310", "CSE 230"], prerequisitesFor: ["CSE 485"] },
      { name: "CSE 340 - Principles of Programming Languages", link: "/courses/cse-340", prerequisites: ["CSE 310", "CSE 230"], prerequisitesFor: ["CSE 485"] },
      { name: "CSE 355 - Theoretical Computer Science", link: "/courses/cse-355", prerequisites: ["CSE 310"], prerequisitesFor: ["CSE 485"] },
      { name: "CSE 360 - Software Engineering", link: "/courses/cse-360", prerequisites: ["CSE 240"], prerequisitesFor: ["CSE 485"] },
      { name: "CSE 365 - Information Assurance", link: "/courses/cse-365", prerequisites: ["CSE 230", "CSE 310"], prerequisitesFor: [] },
      { name: "MAT 343 - Applied Linear Algebra", link: "/courses/mat-343", prerequisites: ["MAT 266"], prerequisitesFor: ["CSE 475"] },
      { name: "IEE 380 - Probability and Statistics", link: "/courses/iee-380", prerequisites: ["MAT 266"], prerequisitesFor: ["CSE 472"] },
    ],
  },
  {
    group: "Mandatory Electives",
    items: [
      { name: "CSE 412 - Database Management", link: "/courses/cse-412", prerequisites: ["CSE 310"] },
      { name: "CSE 434 - Computer Networks", link: "/courses/cse-434", prerequisites: ["CSE 310", "CSE 330"] },
      { name: "CSE 445 - Software Engineering", link: "/courses/cse-445", prerequisites: ["CSE 310", "CSE 360"] },
    ],
  },
  {
    group: "Electives",
    items: [
      { name: "CSE 463 - Human Computer Interaction", link: "/courses/cse-463", prerequisites: ["CSE 310"] },
      { name: "CSE 464 - QA and Testing", link: "/courses/cse-464", prerequisites: ["CSE 310", "CSE 360"] },
      { name: "CSE 466 - Computer Systems Security", link: "/courses/cse-466", prerequisites: ["CSE 310", "CSE 365"] },
      { name: "CSE 471 - Intro to Artificial Intelligence", link: "/courses/cse-471", prerequisites: ["CSE 310"] },
      { name: "CSE 472 - Social Media Mining", link: "/courses/cse-472", prerequisites: ["CSE 310", "IEE 380", "MAT 343"] },
      { name: "CSE 475 - Intro to Machine Learning", link: "/courses/cse-475", prerequisites: ["CSE 205"] },
      { name: "CSE 476 - Intro to Natural Language Processing", link: "/courses/cse-476", prerequisites: ["CSE 310"] },
      { name: "CSE 478 - Intro to Data Visualization", link: "/courses/cse-478", prerequisites: ["CSE 310"] },
    ],
  },
  {
    group: "Capstone",
    items: [
      { name: "CSE 485 - Capstone 1", link: "/courses/cse-485", prerequisites: ["CSE 301", "CSE 330", "CSE 340", "CSE 355", "CSE 360", "ENG 107"], prerequisitesFor: ["CSE 486"] },
      { name: "CSE 486 - Capstone 2", link: "/courses/cse-486", prerequisites: ["CSE 485", "ENG 107"], prerequisitesFor: [] },
    ],
  },
];

// Build prerequisite graph
function getCode(label) {
  const m = label.match(/^[A-Z]{2,4}\s?\d{3}/);
  return m ? m[0].replace(/\s+/, " ") : label;
}

const graph = new Map();
function ensureNode(code) {
  if (!graph.has(code)) {
    graph.set(code, {
      code,
      title: code,
      link: null,
      prereq: new Set(),
      next: new Set(),
    });
  }
  return graph.get(code);
}

// Build the graph
for (const g of catalog) {
  for (const item of g.items) {
    const code = getCode(item.name);
    const node = ensureNode(code);
    node.title = item.name.split(" - ").slice(1).join(" - ") || code;
    node.link = item.link || null;

    (item.prerequisites || []).forEach((p) => {
      const pCode = getCode(p);
      ensureNode(pCode).next.add(code);
      node.prereq.add(pCode);
    });

    (item.prerequisitesFor || []).forEach((n) => {
      const nCode = getCode(n);
      ensureNode(nCode).prereq.add(code);
      node.next.add(nCode);
    });
  }
}

// Ensure all term courses exist in graph
for (const term of Object.values(termLayout)) {
  for (const label of term) ensureNode(getCode(label));
}
spring6OrGroup.forEach((c) => ensureNode(c));

// Helper function to get course info
function getCourseInfo(label) {
  const code = getCode(label);
  const node = graph.get(code) || { code, title: code, link: null };
  return { code, node, displayLabel: label.includes(code) ? null : label };
}
---

<div class="course-flow-container">
  <header class="legend">
    <div class="legend-items">
      <span class="legend-item">
        <span class="legend-color bg-future-soft"></span>
        Indirect prerequisite
      </span>
      <span class="legend-item">
        <span class="legend-color bg-past-soft"></span>
        Indirect dependent
      </span>
      <span class="legend-item">
        <span class="legend-color bg-past"></span>
        Immediate prerequisite
      </span>
      <span class="legend-item">
        <span class="legend-color bg-future"></span>
        Immediate dependent
      </span>
    </div>
  </header>

  <section class="terms-grid" id="termsGrid">
    {termOrder.map((termName) => (
      <div class="term-column">
        <h3 class="term-header">{termName.replace("-", " ")}</h3>
        
        {termLayout[termName]?.map((label) => {
          const { code, node, displayLabel } = getCourseInfo(label);
          return (
            <div 
              class="course" 
              data-code={code}
              data-prereq={JSON.stringify(Array.from(node.prereq))}
              data-next={JSON.stringify(Array.from(node.next))}
            >
              <div class="course-code">{code}</div>
              {node.title !== code && (
                <a 
                  href={node.link || '#'} 
                  class="course-title"
                  target={node.link ? "_blank" : undefined}
                >
                  {displayLabel || node.title}
                </a>
              )}
            </div>
          );
        })}
        
        {termName === "Spring-6" && (
          <div class="or-block">
            <div class="or-courses">
              {spring6OrGroup.map((courseCode, index) => {
                const { node } = getCourseInfo(courseCode);
                return (
                  <>
                    <div 
                      class="course" 
                      data-code={courseCode}
                      data-prereq={JSON.stringify(Array.from(node.prereq))}
                      data-next={JSON.stringify(Array.from(node.next))}
                    >
                      <div class="course-code">{courseCode}</div>
                      {node.title !== courseCode && (
                        <a 
                          href={node.link || '#'} 
                          class="course-title"
                          target={node.link ? "_blank" : undefined}
                        >
                          {node.title}
                        </a>
                      )}
                    </div>
                    {index < spring6OrGroup.length - 1 && <div class="or-text">OR</div>}
                  </>
                );
              })}
            </div>
          </div>
        )}
      </div>
    ))}
  </section>

  <div class="tip">
    Tip: On touch devices, tap a course to toggle highlight; tap empty space to clear.
  </div>
</div>

<style>
  /* Hook into Starlight's theme system */
  .course-flow-container {
    /* Dark mode colors (default) */
    --cf-bg-panel: #121822;
    --cf-bg-card: #16202e;
    --cf-bg-card-hover: #22314a;
    --cf-border-primary: #273347;
    --cf-text-primary: #e6edf3;
    --cf-text-muted: #93a1b3;
    --cf-text-link: #cfe3ff;
    --cf-text-link-hover: #ffffff;
    --cf-shadow-hover: rgba(0, 0, 0, 0.25);
    
    /* Prerequisite/dependent colors */
    --cf-color-future: #1f6feb;
    --cf-color-future-soft: #5181bc;
    --cf-color-past: #1db954;
    --cf-color-past-soft: #8fe3b0;
  }

  /* Light mode - hook into Starlight's data-theme="light" */
  :root[data-theme="light"] .course-flow-container {
    --cf-bg-panel: #f6f8fa;
    --cf-bg-card: #ffffff;
    --cf-bg-card-hover: #f1f3f4;
    --cf-border-primary: #d1d9e0;
    --cf-text-primary: #1f2328;
    --cf-text-muted: #656d76;
    --cf-text-link: #0969da;
    --cf-text-link-hover: #0550ae;
    --cf-shadow-hover: rgba(0, 0, 0, 0.15);
    
    /* Adjust prerequisite/dependent colors for light mode */
    --cf-color-future: #0969da;
    --cf-color-future-soft: #4184e4;
    --cf-color-past: #1a7f37;
    --cf-color-past-soft: #2da44e;
  }

  /* Fallback for auto theme based on prefers-color-scheme */
  @media (prefers-color-scheme: light) {
    :root[data-theme="auto"] .course-flow-container {
      --cf-bg-panel: #f6f8fa;
      --cf-bg-card: #ffffff;
      --cf-bg-card-hover: #f1f3f4;
      --cf-border-primary: #d1d9e0;
      --cf-text-primary: #1f2328;
      --cf-text-muted: #656d76;
      --cf-text-link: #0969da;
      --cf-text-link-hover: #0550ae;
      --cf-shadow-hover: rgba(0, 0, 0, 0.15);
      
      --cf-color-future: #0969da;
      --cf-color-future-soft: #4184e4;
      --cf-color-past: #1a7f37;
      --cf-color-past-soft: #2da44e;
    }
  }

  .course-flow-container {
    max-width: 1200px;
    margin: 2rem auto 3rem;
    padding: 0 1rem;
    font-family: Inter, system-ui, -apple-system, 'Segoe UI', Roboto, Arial, 'Apple Color Emoji', 'Segoe UI Emoji';
    line-height: 1.35;
    color: var(--cf-text-primary);
  }

  .legend {
    margin-bottom: 1rem;
  }

  .legend-items {
    display: flex;
    gap: 0.875rem;
    align-items: center;
    margin-top: 0.5rem;
    color: var(--cf-text-muted);
    font-size: 13px;
  }

  .legend-item {
    display: inline-flex;
    align-items: center;
    gap: 0.375rem;
  }

  .legend-color {
    display: inline-block;
    width: 14px;
    height: 10px;
    border-radius: 2px;
  }

  .bg-future-soft { background-color: var(--cf-color-future-soft); }
  .bg-past-soft { background-color: var(--cf-color-past-soft); }
  .bg-past { background-color: var(--cf-color-past); }
  .bg-future { background-color: var(--cf-color-future); }

  .terms-grid {
    display: grid;
    grid-template-columns: repeat(8, 1fr);
    gap: 0;
    margin-top: 1.125rem;
    border-radius: 10px;
  }

  @media (max-width: 1100px) {
    .terms-grid { grid-template-columns: repeat(4, 1fr); }
  }

  @media (max-width: 720px) {
    .terms-grid { grid-template-columns: repeat(2, 1fr); }
  }

  .term-column {
    display: flex;
    min-height: 140px;
    flex-direction: column;
    gap: 0.625rem;
    background-color: var(--cf-bg-panel);
    border: 1px solid var(--cf-border-primary);
    padding: 0.625rem;
  }

  .term-header {
    margin: 0;
    font-size: 14px;
    letter-spacing: 0.03em;
    color: var(--cf-text-muted);
    text-transform: uppercase;
  }

  .course {
    position: relative;
    cursor: pointer;
    border-radius: 6px;
    border: 1px solid var(--cf-border-primary);
    background-color: var(--cf-bg-card);
    padding: 0.625rem;
    transition: all 0.2s ease;
  }

  .course:hover {
    background-color: var(--cf-bg-card-hover);
    transform: translateY(-1px);
    box-shadow: 0 4px 12px var(--cf-shadow-hover);
  }

  .course-code {
    font-weight: bold;
    letter-spacing: 0.04em;
    color: var(--cf-text-primary);
  }

  .course-title {
    display: block;
    margin-top: 0.125rem;
    font-size: 13px;
    color: var(--cf-text-link);
    text-decoration: none;
  }

  .course-title:hover {
    color: var(--cf-text-link-hover);
  }

  .or-block {
    margin-top: 0.5rem;
    border-top: 1px dashed var(--cf-border-primary);
    padding-top: 0.5rem;
  }

  .or-courses {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .or-text {
    color: var(--cf-text-muted);
    font-weight: bold;
    letter-spacing: 0.06em;
    padding: 0 0.125rem;
    font-size: 12px;
    text-align: center;
  }

  .tip {
    margin-top: 1.75rem;
    color: var(--cf-text-muted);
    font-size: 12px;
  }

  /* Highlight states - adjusted for both light and dark modes */
  .course.future,
  .course.future-soft,
  .course.past,
  .course.past-soft {
    outline: 1px solid transparent;
  }
  
  .course.future {
    background: color-mix(in srgb, var(--cf-color-future) 70%, transparent) !important;
    outline-color: color-mix(in srgb, var(--cf-color-future) 40%, transparent);
  }
  
  .course.future-soft {
    background: color-mix(in srgb, var(--cf-color-future-soft) 50%, transparent) !important;
    outline-color: color-mix(in srgb, var(--cf-color-future-soft) 35%, transparent);
  }
  
  .course.past {
    background: color-mix(in srgb, var(--cf-color-past) 70%, transparent) !important;
    outline-color: color-mix(in srgb, var(--cf-color-past) 40%, transparent);
  }
  
  .course.past-soft {
    background: color-mix(in srgb, var(--cf-color-past-soft) 50%, transparent) !important;
    outline-color: color-mix(in srgb, var(--cf-color-past-soft) 35%, transparent);
  }

  .course.future:hover,
  .course.future-soft:hover,
  .course.past:hover,
  .course.past-soft:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px var(--cf-shadow-hover);
  }

  /* Fallback for browsers that don't support color-mix */
  @supports not (background: color-mix(in srgb, red 50%, transparent)) {
    /* Dark mode fallback */
    .course.future {
      background: rgba(31, 111, 235, 0.7) !important;
      outline-color: rgba(31, 111, 235, 0.4);
    }
    
    .course.future-soft {
      background: rgba(81, 129, 188, 0.5) !important;
      outline-color: rgba(81, 129, 188, 0.35);
    }
    
    .course.past {
      background: rgba(29, 185, 84, 0.7) !important;
      outline-color: rgba(29, 185, 84, 0.4);
    }
    
    .course.past-soft {
      background: rgba(143, 227, 176, 0.5) !important;
      outline-color: rgba(143, 227, 176, 0.35);
    }

    /* Light mode fallback - hook into Starlight's data-theme="light" */
    :root[data-theme="light"] .course.future {
      background: rgba(9, 105, 218, 0.5) !important;
      outline-color: rgba(9, 105, 218, 0.3);
    }
    
    :root[data-theme="light"] .course.future-soft {
      background: rgba(65, 132, 228, 0.3) !important;
      outline-color: rgba(65, 132, 228, 0.25);
    }
    
    :root[data-theme="light"] .course.past {
      background: rgba(26, 127, 55, 0.5) !important;
      outline-color: rgba(26, 127, 55, 0.3);
    }
    
    :root[data-theme="light"] .course.past-soft {
      background: rgba(45, 164, 78, 0.3) !important;
      outline-color: rgba(45, 164, 78, 0.25);
    }

    /* Auto theme fallback */
    @media (prefers-color-scheme: light) {
      :root[data-theme="auto"] .course.future {
        background: rgba(9, 105, 218, 0.5) !important;
        outline-color: rgba(9, 105, 218, 0.3);
      }
      
      :root[data-theme="auto"] .course.future-soft {
        background: rgba(65, 132, 228, 0.3) !important;
        outline-color: rgba(65, 132, 228, 0.25);
      }
      
      :root[data-theme="auto"] .course.past {
        background: rgba(26, 127, 55, 0.5) !important;
        outline-color: rgba(26, 127, 55, 0.3);
      }
      
      :root[data-theme="auto"] .course.past-soft {
        background: rgba(45, 164, 78, 0.3) !important;
        outline-color: rgba(45, 164, 78, 0.25);
      }
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // BFS traversal for prerequisite highlighting
    function bfsLayers(startCode, direction = 'past') {
      const layers = [];
      const visited = new Set([startCode]);
      let frontier = new Set([startCode]);

      while (frontier.size) {
        const nextFrontier = new Set();
        frontier.forEach((code) => {
          const courseEl = document.querySelector(`[data-code="${code}"]`);
          if (!courseEl) return;
          
          const connections = direction === 'past' 
            ? JSON.parse(courseEl.dataset.prereq || '[]')
            : JSON.parse(courseEl.dataset.next || '[]');
          
          connections.forEach((connectedCode) => {
            if (!visited.has(connectedCode)) {
              visited.add(connectedCode);
              nextFrontier.add(connectedCode);
            }
          });
        });
        
        if (nextFrontier.size) layers.push(nextFrontier);
        frontier = nextFrontier;
      }
      
      return layers;
    }

    function highlightFor(code) {
      const pastLayers = bfsLayers(code, 'past');
      const futureLayers = bfsLayers(code, 'future');

      // Clear existing highlights
      document.querySelectorAll('.course').forEach((el) => {
        el.classList.remove('past', 'past-soft', 'future', 'future-soft');
      });

      // Highlight immediate prerequisites (green)
      if (pastLayers[0]) {
        pastLayers[0].forEach((c) => {
          document.querySelectorAll(`[data-code="${c}"]`).forEach((el) => {
            el.classList.add('past');
          });
        });
      }

      // Highlight indirect prerequisites (light green)
      const pastSoft = new Set(pastLayers.slice(1).flat());
      pastSoft.forEach((c) => {
        document.querySelectorAll(`[data-code="${c}"]`).forEach((el) => {
          el.classList.add('past-soft');
        });
      });

      // Highlight immediate dependents (blue)
      if (futureLayers[0]) {
        futureLayers[0].forEach((c) => {
          document.querySelectorAll(`[data-code="${c}"]`).forEach((el) => {
            el.classList.add('future');
          });
        });
      }

      // Highlight indirect dependents (light blue)
      const futureSoft = new Set(futureLayers.slice(1).flat());
      futureSoft.forEach((c) => {
        document.querySelectorAll(`[data-code="${c}"]`).forEach((el) => {
          el.classList.add('future-soft');
        });
      });
    }

    function clearHighlights() {
      document.querySelectorAll('.course').forEach((el) => {
        el.classList.remove('past', 'past-soft', 'future', 'future-soft', 'active-hover');
      });
    }

    // Add event listeners
    document.querySelectorAll('.course').forEach((course) => {
      const code = course.dataset.code;
      
      course.addEventListener('mouseenter', () => highlightFor(code));
      course.addEventListener('mouseleave', () => clearHighlights());
      
      course.addEventListener('click', (e) => {
        e.stopPropagation();
        const active = course.classList.contains('active-hover');
        clearHighlights();
        if (!active) {
          course.classList.add('active-hover');
          highlightFor(code);
        }
      });
    });

    // Clear highlights when clicking empty space
    document.addEventListener('click', clearHighlights);
  });
</script>