---
// CopyPageDropdown.astro - Component for copying page content and opening in external AI services
const currentUrl = Astro.url.href;
const baseUrl = Astro.site?.href || "https://wiki.thesoda.io";
---

<div class="copy-page-dropdown">
  <button class="copy-page-button" aria-label="Copy page options" aria-expanded="false" aria-haspopup="menu">
    <svg class="copy-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect>
      <path d="m4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path>
    </svg>
    <span class="copy-text">Copy page</span>
    <svg class="chevron-icon" width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <polyline points="6,9 12,15 18,9"></polyline>
    </svg>
  </button>

  <div class="dropdown-menu" role="menu">
    <button class="dropdown-item copy-as-markdown" role="menuitem">
      <svg class="copy-icon" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <rect width="14" height="14" x="8" y="8" rx="2" ry="2"></rect>
        <path d="m4 16c-1.1 0-2-.9-2-2V4c0-1.1.9-2 2-2h10c1.1 0 2 .9 2 2"></path>
      </svg>
      <div>
        <div class="item-title">Copy page</div>
        <div class="item-subtitle">Copy page as Markdown for LLMs</div>
      </div>
    </button>

    <button class="dropdown-item open-chatgpt" role="menuitem">
      <svg
        fill="currentColor"
        fill-rule="evenodd"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
        class="w-4 h-4 shrink-0"
        ><title>OpenAI</title><path
          d="M21.55 10.004a5.416 5.416 0 00-.478-4.501c-1.217-2.09-3.662-3.166-6.05-2.66A5.59 5.59 0 0010.831 1C8.39.995 6.224 2.546 5.473 4.838A5.553 5.553 0 001.76 7.496a5.487 5.487 0 00.691 6.5 5.416 5.416 0 00.477 4.502c1.217 2.09 3.662 3.165 6.05 2.66A5.586 5.586 0 0013.168 23c2.443.006 4.61-1.546 5.361-3.84a5.553 5.553 0 003.715-2.66 5.488 5.488 0 00-.693-6.497v.001zm-8.381 11.558a4.199 4.199 0 01-2.675-.954c.034-.018.093-.05.132-.074l4.44-2.53a.71.71 0 00.364-.623v-6.176l1.877 1.069c.02.01.033.029.036.05v5.115c-.003 2.274-1.87 4.118-4.174 4.123zM4.192 17.78a4.059 4.059 0 01-.498-2.763c.032.02.09.055.131.078l4.44 2.53c.225.13.504.13.73 0l5.42-3.088v2.138a.068.068 0 01-.027.057L9.9 19.288c-1.999 1.136-4.552.46-5.707-1.51h-.001zM3.023 8.216A4.15 4.15 0 015.198 6.41l-.002.151v5.06a.711.711 0 00.364.624l5.42 3.087-1.876 1.07a.067.067 0 01-.063.005l-4.489-2.559c-1.995-1.14-2.679-3.658-1.53-5.63h.001zm15.417 3.54l-5.42-3.088L14.896 7.6a.067.067 0 01.063-.006l4.489 2.557c1.998 1.14 2.683 3.662 1.529 5.633a4.163 4.163 0 01-2.174 1.807V12.38a.71.71 0 00-.363-.623zm1.867-2.773a6.04 6.04 0 00-.132-.078l-4.44-2.53a.731.731 0 00-.729 0l-5.42 3.088V7.325a.068.068 0 01.027-.057L14.1 4.713c2-1.137 4.555-.46 5.707 1.513.487.833.664 1.809.499 2.757h.001zm-11.741 3.81l-1.877-1.068a.065.065 0 01-.036-.051V6.559c.001-2.277 1.873-4.122 4.181-4.12.976 0 1.92.338 2.671.954-.034.018-.092.05-.131.073l-4.44 2.53a.71.71 0 00-.365.623l-.003 6.173v.002zm1.02-2.168L12 9.25l2.414 1.375v2.75L12 14.75l-2.415-1.375v-2.75z"
        ></path></svg
      >
      <div>
        <div class="item-title">Open in ChatGPT</div>
        <div class="item-subtitle">Ask questions about this page</div>
      </div>
    </button>

    <button class="dropdown-item open-claude" role="menuitem">
      <svg
        fill="currentColor"
        fill-rule="evenodd"
        height="1em"
        viewBox="0 0 24 24"
        width="1em"
        xmlns="http://www.w3.org/2000/svg"
        class="w-4 h-4 shrink-0"
        ><title>Anthropic</title><path
          d="M13.827 3.52h3.603L24 20h-3.603l-6.57-16.48zm-7.258 0h3.767L16.906 20h-3.674l-1.343-3.461H5.017l-1.344 3.46H0L6.57 3.522zm4.132 9.959L8.453 7.687 6.205 13.48H10.7z"
        ></path></svg
      >
      <div>
        <div class="item-title">Open in Claude</div>
        <div class="item-subtitle">Ask questions about this page</div>
      </div>
    </button>
  </div>
</div>

<script>
  class CopyPageDropdown {
    constructor() {
      this.dropdown = document.querySelector(".copy-page-dropdown");
      this.button = this.dropdown?.querySelector(".copy-page-button");
      this.menu = this.dropdown?.querySelector(".dropdown-menu");
      this.copyButton = this.dropdown?.querySelector(".copy-as-markdown");
      this.chatGptButton = this.dropdown?.querySelector(".open-chatgpt");
      this.claudeButton = this.dropdown?.querySelector(".open-claude");

      this.isOpen = false;

      this.init();
    }

    init() {
      if (!this.dropdown) return;

      // Toggle dropdown
      this.button?.addEventListener("click", (e) => {
        e.stopPropagation();
        this.toggleDropdown();
      });

      // Close dropdown when clicking outside
      document.addEventListener("click", () => {
        if (this.isOpen) {
          this.closeDropdown();
        }
      });

      // Prevent dropdown from closing when clicking inside
      this.menu?.addEventListener("click", (e) => {
        e.stopPropagation();
      });

      // Copy as markdown
      this.copyButton?.addEventListener("click", () => {
        this.copyPageAsMarkdown();
        this.closeDropdown();
      });

      // Open in ChatGPT
      this.chatGptButton?.addEventListener("click", () => {
        this.openInChatGPT();
        this.closeDropdown();
      });

      // Open in Claude
      this.claudeButton?.addEventListener("click", () => {
        this.openInClaude();
        this.closeDropdown();
      });

      // Handle keyboard navigation
      this.dropdown?.addEventListener("keydown", (e) => {
        this.handleKeydown(e);
      });
    }

    toggleDropdown() {
      if (this.isOpen) {
        this.closeDropdown();
      } else {
        this.openDropdown();
      }
    }

    openDropdown() {
      this.isOpen = true;
      this.dropdown?.classList.add("open");
      this.button?.setAttribute("aria-expanded", "true");
    }

    closeDropdown() {
      this.isOpen = false;
      this.dropdown?.classList.remove("open");
      this.button?.setAttribute("aria-expanded", "false");
    }

    async copyPageAsMarkdown() {
      try {
        // Get the main content area
        const content = document.querySelector(".sl-markdown-content, main, .content, article");
        if (!content) {
          throw new Error("Could not find page content");
        }

        // Create a simplified markdown representation
        const title = document.querySelector("h1")?.textContent || document.title;
        const url = window.location.href;

        // Extract text content while preserving some structure
        const markdownContent = this.convertToMarkdown(content, title, url);

        // Copy to clipboard
        await navigator.clipboard.writeText(markdownContent);

        // Show success feedback
        this.showToast("Page copied as Markdown!");
      } catch (error) {
        console.error("Failed to copy page:", error);
        this.showToast("Failed to copy page", "error");
      }
    }

    convertToMarkdown(element, title, url) {
      let markdown = `# ${title}\n\n`;
      markdown += `Source: ${url}\n\n`;

      // Simple conversion - in a real implementation, you might want a more sophisticated converter
      const walker = document.createTreeWalker(element, NodeFilter.SHOW_TEXT | NodeFilter.SHOW_ELEMENT, null, false);

      let node;
      let lastNodeType = "";

      while ((node = walker.nextNode())) {
        if (node.nodeType === Node.TEXT_NODE) {
          const text = node.textContent?.trim();
          if (text) {
            markdown += text + " ";
          }
        } else if (node.nodeType === Node.ELEMENT_NODE) {
          const tagName = node.tagName.toLowerCase();

          switch (tagName) {
            case "h1":
            case "h2":
            case "h3":
            case "h4":
            case "h5":
            case "h6":
              const level = "#".repeat(parseInt(tagName[1]));
              markdown += `\n\n${level} `;
              lastNodeType = "heading";
              break;
            case "p":
              if (lastNodeType !== "paragraph") {
                markdown += "\n\n";
              }
              lastNodeType = "paragraph";
              break;
            case "li":
              markdown += "\n- ";
              lastNodeType = "list";
              break;
            case "br":
              markdown += "\n";
              break;
            case "code":
              markdown += "`";
              break;
          }
        }
      }

      // Clean up the markdown
      return markdown
        .replace(/\s+/g, " ")
        .replace(/\n\s+/g, "\n")
        .replace(/\n{3,}/g, "\n\n")
        .trim();
    }

    openInChatGPT() {
      const url = window.location.href;
      const prompt = `Read from ${url} so I can ask questions about it.`;
      const encodedPrompt = encodeURIComponent(prompt);
      const chatGptUrl = `https://chatgpt.com/?q=${encodedPrompt}`;
      window.open(chatGptUrl, "_blank");
    }

    openInClaude() {
      const url = window.location.href;
      const prompt = `Read from ${url} so I can ask questions about it.`;
      const encodedPrompt = encodeURIComponent(prompt);
      const claudeUrl = `https://claude.ai/chat?q=${encodedPrompt}`;
      window.open(claudeUrl, "_blank");
    }

    showToast(message, type = "success") {
      // Create toast element
      const toast = document.createElement("div");
      toast.className = `copy-toast copy-toast-${type}`;
      toast.textContent = message;

      // Add to page
      document.body.appendChild(toast);

      // Trigger animation
      requestAnimationFrame(() => {
        toast.classList.add("show");
      });

      // Remove after 3 seconds
      setTimeout(() => {
        toast.classList.remove("show");
        setTimeout(() => {
          document.body.removeChild(toast);
        }, 300);
      }, 3000);
    }

    handleKeydown(e) {
      if (e.key === "Escape") {
        this.closeDropdown();
        this.button?.focus();
      }
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      new CopyPageDropdown();
    });
  } else {
    new CopyPageDropdown();
  }

  // Re-initialize on page navigation (for SPAs)
  document.addEventListener("astro:page-load", () => {
    new CopyPageDropdown();
  });
</script>

<style>
  .copy-page-dropdown {
    position: relative;
    display: inline-block;
  }

  .copy-page-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: var(--sl-color-bg);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.5rem;
    color: var(--sl-color-text);
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s ease;
    white-space: nowrap;
  }

  .copy-page-button:hover {
    background: var(--sl-color-bg-accent);
    border-color: var(--sl-color-gray-4);
  }

  .copy-page-button:focus {
    outline: 2px solid var(--sl-color-accent);
    outline-offset: 2px;
  }

  .copy-icon,
  .chevron-icon {
    flex-shrink: 0;
  }

  .chevron-icon {
    transition: transform 0.2s ease;
  }

  .copy-page-dropdown.open .chevron-icon {
    transform: rotate(180deg);
  }

  .dropdown-menu {
    position: absolute;
    top: calc(100% + 0.5rem);
    right: 0;
    min-width: 280px;
    background: var(--sl-color-bg);
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.75rem;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.15);
    opacity: 0;
    visibility: hidden;
    transform: translateY(-0.5rem);
    transition: all 0.2s ease;
    z-index: 1000;
    padding: 0.5rem;
  }

  .copy-page-dropdown.open .dropdown-menu {
    opacity: 1;
    visibility: visible;
    transform: translateY(0);
  }

  .dropdown-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    width: 100%;
    padding: 0.75rem;
    background: transparent;
    border: none;
    border-radius: 0.5rem;
    color: var(--sl-color-text);
    text-align: left;
    cursor: pointer;
    transition: background 0.2s ease;
  }

  .dropdown-item:hover {
    background: var(--sl-color-bg-accent);
  }

  .dropdown-item:focus {
    outline: 2px solid var(--sl-color-accent);
    outline-offset: 2px;
  }

  .item-icon {
    flex-shrink: 0;
    opacity: 0.7;
  }

  .item-title {
    font-weight: 500;
    font-size: 0.875rem;
    line-height: 1.2;
  }

  .item-subtitle {
    font-size: 0.75rem;
    opacity: 0.6;
    line-height: 1.2;
    margin-top: 0.125rem;
  }

  /* Toast notifications */
  .copy-toast {
    position: fixed;
    bottom: 2rem;
    right: 2rem;
    padding: 0.75rem 1rem;
    background: var(--sl-color-accent);
    color: white;
    border-radius: 0.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    transform: translateY(100%);
    opacity: 0;
    transition: all 0.3s ease;
    z-index: 2000;
  }

  .copy-toast.show {
    transform: translateY(0);
    opacity: 1;
  }

  .copy-toast-error {
    background: #ef4444;
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .copy-text {
      display: none;
    }

    .dropdown-menu {
      min-width: 260px;
    }

    .copy-toast {
      bottom: 1rem;
      right: 1rem;
      left: 1rem;
      width: auto;
    }
  }

  /* Dark mode support */
  @media (prefers-color-scheme: dark) {
    .copy-page-dropdown {
      --sl-color-bg: #1a1a1a;
      --sl-color-bg-accent: #2a2a2a;
      --sl-color-text: #e0e0e0;
      --sl-color-gray-4: #404040;
      --sl-color-gray-5: #333333;
      --sl-color-accent: #3b82f6;
    }
  }
</style>
